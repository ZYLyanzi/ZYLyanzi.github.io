<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[开发微信小程序中所遇到的问题]]></title>
      <url>http://yoursite.com/2017/07/12/wxxq/</url>
      <content type="html"><![CDATA[<h3 id="一、页面栈的控制"><a href="#一、页面栈的控制" class="headerlink" title="一、页面栈的控制"></a>一、页面栈的控制</h3><p>官方规定小程序最多只能有 <em> 五个页面 </em> 同时存在，意思是在不关闭页面的情况，最多新开五个页面，页面深度为5。</p>
<p>但是目前一般来说，应用的业务场景和交互逻辑，远远不止5个页面栈。那如何用 <em> 五个页面 </em> 去实现更多复杂的流程呢？我们将从以下3个方面去进一步了解:</p>
<ol>
<li>小程序的4种导航跳转方式</li>
<li>选择页面的跳转方式的选择</li>
<li>页面传参</li>
</ol>
<a id="more"></a>
<h4 id="1、小程序的4种导航跳转方式"><a href="#1、小程序的4种导航跳转方式" class="headerlink" title="1、小程序的4种导航跳转方式"></a>1、小程序的4种导航跳转方式</h4><p>wx.navigateTo：保留当前页面，跳转到新的页面，此时页面栈会加一个页面信息，此时页面栈数加一。</p>
<p>wx.redirectTo：关闭当前页面，跳转到指定页面，这里的关闭在页面栈里面是删除对应的页面信息，此时页面栈数减一。</p>
<p>wx.navigateBack：关闭当前页面，返回上一页面或多级页面。此时页面栈数减一。如果要跳转到指定页面，可以通过getCurrentPages()方法获取页面栈的长度，可以根据这个数跳转到指定页面。</p>
<p>wx.switchTab：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面，这个是新出来的API,在我开发过程中没有提供此方法，不过用此方法跳转还是又一定限制，如果用页面栈里面将重新洗牌了。</p>
<h4 id="2、选择页面的跳转方式的选择"><a href="#2、选择页面的跳转方式的选择" class="headerlink" title="2、选择页面的跳转方式的选择"></a>2、选择页面的跳转方式的选择</h4><ol>
<li><p>对于可逆操作使用 wx.navigateTo，比如一级页面跳二级页面。<br>每新开一个页面，页面栈大小加一</p>
<p><img src="/uploads/wx/01.png" alt="01"></p>
</li>
<li><p>对于不可逆操作使用 wx.redirectTo，比如登录页，登录成功后关闭登录页。</p>
<p><img src="/uploads/wx/02.png" alt="02"></p>
</li>
<li><p>对于列表，还有介绍性等不常用的页面使用 wx.navigatrBack</p>
<p><img src="/uploads/wx/03.png" alt="03"></p>
</li>
</ol>
<h4 id="3、页面传参"><a href="#3、页面传参" class="headerlink" title="3、页面传参"></a>3、页面传参</h4><p>小程序页面之间的数据传输，放在Storage缓存里面，让每一个页面都能共享到相同数据。</p>
<p>比如：A页面和B页面，点击A页面的按钮进入B页面，然后在B页面选择日期后返回A页面，A页面要显示B页面选择的日期。</p>
<p>我们可以使用 wx.navigateTo + wx.navigateBack + onShow方式 来实现<br>（A页面  wx.navigateTo B页面。B页面 wx.navigateBack A页面，把日期setStorage到缓存里。然后在A页面的 onShow 方法里 重新加载数据）</p>
<h3 id="二、事件对象"><a href="#二、事件对象" class="headerlink" title="二、事件对象"></a>二、事件对象</h3><p>要注意 target 和 currentTarget 的使用。<br>target  触发事件的源组件。<br>currentTarget  事件绑定的当前组件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开发微信小程序]]></title>
      <url>http://yoursite.com/2017/07/12/wxxiaochengxu/</url>
      <content type="html"><![CDATA[<p><strong> 整体配置 </strong></p>
<p>1、必不可少的三个文件app.js、app.json、app.wxss，js后缀的是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件</p>
<p>2、 app.js是小程序的脚本代码，在这个文件中监听并处理小程序的生命周期函数、声明全局变量，调用API</p>
<p>3、app.json是对整个小程序的全局配置，在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题</p>
<p>4、​ app.wxss是整个小程序的公共样式表</p>
<a id="more"></a>
<p><strong> 创建页面 </strong></p>
<p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。</p>
<p>1、规定描述页面的这四个文件必须具有相同的路径与文件名</p>
<p>2、页面的配置文件（.json），或者样式文件（.wxss）， 会覆盖  app.json、app.wxss</p>
<p><strong> 关于页面组件和样式 </strong><br>1、小程序里是没有div的，要用view<br>2、小程序没有a标签，页面链接用 navigator<br>3、样式的话，抛开盒模型，用flex写布局。</p>
<p><strong> 关于列表渲染和操作</strong><br>WXML 中的动态数据均来自对应 Page 的 data。<br>xxx.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  data:&#123;</div><div class="line">    manager_list:[</div><div class="line">         &#123;</div><div class="line">            user_id: 1,</div><div class="line">            user_name: &quot;小红花&quot;,</div><div class="line">            mobile: &quot;18612345678&quot;</div><div class="line">        &#125;,</div><div class="line">           &#123;</div><div class="line">            user_id: 2,</div><div class="line">            user_name: &quot;小胖子&quot;,</div><div class="line">            mobile: &quot;18612345678&quot;</div><div class="line">        &#125;,</div><div class="line">           &#123;</div><div class="line">            user_id: 3,</div><div class="line">            user_name: &quot;烟仔&quot;,</div><div class="line">            mobile: &quot;18612345678&quot;</div><div class="line">        &#125;,   &#123;</div><div class="line">            user_id: 4,</div><div class="line">            user_name: &quot;对的&quot;,</div><div class="line">            mobile: &quot;18612345678&quot;</div><div class="line">        &#125;,   &#123;</div><div class="line">            user_id: 5,</div><div class="line">            user_name: &quot;飒飒&quot;,</div><div class="line">            mobile: &quot;18612345678&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>使用wx:for 渲染列表。<br>使用 wx:for-item 可以指定数组当前元素的变量名。<br>使用 wx:for-index 可以指定数组当前下标的变量名.<br>xxx.wxml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;items&quot; wx:for = &quot;&#123;&#123;manager_list&#125;&#125;&quot; wx:key=&quot;unique&quot; wx:for-item = &quot;item&quot; wx:for-index = &quot;idx&quot;&gt;</div><div class="line">  &lt;view class=&quot;top&quot;&gt;</div><div class="line">    &lt;text  class=&quot;user-name&quot;&gt;&#123;&#123;item.user_name&#125;&#125;&lt;/text&gt;</div><div class="line">  &lt;view class=&quot;del&quot; bindtap = &quot;delete_admin&quot; data-idx = &quot;&#123;&#123;idx&#125;&#125;&quot;&gt;删除&lt;/view&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure>
<p>bindtap = “delete_admin” 双击事件绑定 delete_admin（）方法。<br>小程序里面是不能用js操作dom的，所以，如果我们要实现，点击 <code>删除</code> 按钮，获取该用户id，可以 用wx:for-index，把前数组的下标存起来。</p>
<p>在xxx.js 中，可以这么获取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var i = e.target.dataset.idx;</div></pre></td></tr></table></figure></p>
<p><strong> 表单提交 </strong></p>
<p>表单组件中 name 来作为 key,当点击 表单中 formType 为 submit 的 button 组件时，会将表单组件中的 value 值进行提交。</p>
<p>xxx.wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;form bindsubmit=&quot;formSubmit&quot;&gt;</div><div class="line">	&lt;view class=&quot;top&quot;&gt;</div><div class="line">		&lt;view class=&quot;name&quot;&gt;</div><div class="line">		  &lt;label&gt;姓名&lt;/label&gt;</div><div class="line">		  &lt;input name=&quot;user_name&quot; placeholder=&quot;请输入管理员姓名&quot; maxlength = &quot;15&quot; value = &quot;&quot;/&gt;</div><div class="line">		&lt;/view&gt;</div><div class="line">		&lt;view class=&quot;tel&quot;&gt;</div><div class="line">		  &lt;label&gt;手机号码&lt;/label&gt;</div><div class="line">		  &lt;input name=&quot;mobile&quot; placeholder=&quot;请输入管理员手机号&quot; type=&quot;number&quot; maxlength = &quot;11&quot;  value=&quot;&quot;/&gt;</div><div class="line">		&lt;/view&gt;</div><div class="line">		&lt;text class=&quot;dec&quot;&gt;管理员可用手机号码登录&lt;/text&gt;</div><div class="line">	&lt;/view&gt;</div><div class="line">	&lt;view class=&quot;bottom&quot;&gt;</div><div class="line">	 	&lt;button formType=&quot;submit&quot;&gt; 完成 &lt;/button&gt;</div><div class="line">	&lt;/view&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>xxx.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">formSubmit: function(e) &#123;</div><div class="line">     if(e.detail.value.user_name.length==0)&#123;</div><div class="line">       wx.showToast(&#123;</div><div class="line">        title: &apos;姓名不能为空!&apos;,</div><div class="line">        icon: &apos;loading&apos;,</div><div class="line">        duration: 700</div><div class="line">      &#125;)</div><div class="line">     &#125;else if(e.detail.value.mobile.length===0)&#123;</div><div class="line">      wx.showToast(&#123;</div><div class="line">        title: &apos;手机号码不能为空!&apos;,</div><div class="line">        icon: &apos;loading&apos;,</div><div class="line">        duration: 700</div><div class="line">      &#125;)</div><div class="line">     &#125;else if(!(/^1(3|4|5|7|8)\d&#123;9&#125;$/.test(e.detail.value.mobile)))&#123;</div><div class="line">      wx.showToast(&#123;</div><div class="line">        title: &apos;请输入正确的手机号码!&apos;,</div><div class="line">        icon: &apos;loading&apos;,</div><div class="line">        duration: 700</div><div class="line">      &#125;)</div><div class="line">     &#125;else&#123;</div><div class="line">      wx.request(&#123;</div><div class="line">        url: &apos;https://xxx&apos;,</div><div class="line">        data:&#123;</div><div class="line">          mobile: e.detail.value.mobile,</div><div class="line">          user_name: e.detail.value.user_name</div><div class="line">        &#125;,</div><div class="line">        method: POST,</div><div class="line">        header: &#123;</div><div class="line">            &apos;content-type&apos;: &apos;application/json&apos;,</div><div class="line">        &#125;,</div><div class="line">        success: function(res) &#123;</div><div class="line">          if(res.err_code == 0)&#123;</div><div class="line">           wx.redirectTo(&#123;</div><div class="line">              url: &apos;/pages/admin/manag_admin/manag_admin&apos;</div><div class="line">            &#125;)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">     &#125;   </div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端资源推荐]]></title>
      <url>http://yoursite.com/2017/07/12/websource/</url>
      <content type="html"><![CDATA[<p>最全的资源教程-前端涉及的所有知识体系 <a href="https://github.com/AutumnsWind/Front-end-tutorial" target="_blank" rel="external">https://github.com/AutumnsWind/Front-end-tutorial</a></p>
<p>前端导航 <a href="http://whycss.com/" target="_blank" rel="external">http://whycss.com/</a></p>
<p>开发者头条 <a href="http://toutiao.io/" target="_blank" rel="external">http://toutiao.io/</a></p>
<p>git中文帮助文档 <a href="https://git-scm.com/book/zh/v1/" target="_blank" rel="external">https://git-scm.com/book/zh/v1/</a></p>
<p>在线JSON校验 <a href="http://www.bejson.com/" target="_blank" rel="external">http://www.bejson.com/</a></p>
<p>阮一峰ECMAScript 6中文教程 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
<p>React Native中文网 <a href="http://reactnative.cn/" target="_blank" rel="external">http://reactnative.cn/</a></p>
<p>腾讯AlloyTeam全端团队Blog <a href="http://www.alloyteam.com/" target="_blank" rel="external">http://www.alloyteam.com/</a></p>
<p>百度前端研发部Blog <a href="http://fex.baidu.com/" target="_blank" rel="external">http://fex.baidu.com/</a></p>
<p>淘宝网UED团队Blog <a href="http://ued.taobao.org/blog/" target="_blank" rel="external">http://ued.taobao.org/blog/</a></p>
<p>阿里巴巴国际UED团队Blog <a href="http://www.aliued.com/" target="_blank" rel="external">http://www.aliued.com/</a></p>
<p>php大牛惠新宸Blog <a href="http://www.laruence.com/" target="_blank" rel="external">http://www.laruence.com/</a></p>
<p>浏览器兼容插叙 [<a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a>]</p>
<p>设计模式书籍：《Head First 设计模式》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端性能优化总结]]></title>
      <url>http://yoursite.com/2017/07/12/webperformance/</url>
      <content type="html"><![CDATA[<p> 我们建立网站就是想让目标人群来访问，前端是用户所直接接触的。为了给用户更好的体验，前端性能优化是必须滴！最近读了本《高性能的JavaScript》，然后结合实际遇到的问题。总结以下几个方面进行前端性能优化：</p>
<a id="more"></a>
<h3 id="一、-加载"><a href="#一、-加载" class="headerlink" title="一、 加载"></a>一、 加载</h3><p><strong> <code>&lt;body&gt;</code>标签闭合之前，将<code>js</code>放在底部，将<code>css</code>放在顶部 </strong><br>这样能保证在脚本执行之前页面已经完成渲染，避免加载<code>js</code>对后续的资源造成阻塞。</p>
<h3 id="二、-数据"><a href="#二、-数据" class="headerlink" title="二、 数据"></a>二、 数据</h3><p><strong> 1. 能使用局部变量。和字面量（int a=1）的，尽量不使用全局变量 </strong><br>因为局部变量存在作用域链的<strong> 起始位置 </strong>，因此访问局部变量比访问跨作用域链的变量更快。变量在作用域链的位置越深，访问时间越长，而全局变量处在作用域链的<strong> 最末端 </strong>，因此访问速度最慢。</p>
<p><strong> 2. 嵌套对象成员会影响性能，尽量少用</strong><br>嵌套越深，读取越慢，每次的点操作符，js引擎都会搜索所有的对象成员。所以<code>location.href</code>优于<code>window.location.href</code></p>
<p><strong> 3.缓存对象成员值 </strong><br>把常用的对象成员，数组元素，跨域变量保存在局部变量中，前面也说了局部变量的访问速度是最快的捏！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function toggle(element)&#123;</div><div class="line">YAHOO.util.Dom.hassClass(element,”selected”)</div><div class="line">YAHOO.util.Dom.removeClass(element,”selected”)</div><div class="line">&#125;</div><div class="line">改良后↓</div><div class="line">function toggle(element)&#123;</div><div class="line">var Dom =  YAHOO.util.Dom</div><div class="line">Dom.hassClass(element,”selected”)</div><div class="line">Dom.removeClass(element,”selected”)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="三、-DOM编程"><a href="#三、-DOM编程" class="headerlink" title="三、 DOM编程"></a>三、 DOM编程</h3><p><strong> 1. 最小化DOM访问次数 </strong><br>因为DOM访问次数越多，DOM重绘重排就越多，如果要多次改动DOM结构，就应该把要改动的部分先取出来，改动完成后再放回去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var top_100_list = [...], // 这里是100个字符串的数组  </div><div class="line">$mylist = $(&quot;#mylist&quot;); </div><div class="line">for (var i=0, l=top_100_list.length; i&lt;l; i++)&#123;</div><div class="line">    $mylist.append(&quot;&lt;li&gt;&quot; + top_100_list[i] + &quot;&lt;/li&gt;&quot;); // 100次DOM操作</div><div class="line">&#125;</div><div class="line">改良后↓</div><div class="line">var top_100_list = [...],</div><div class="line">$mylist = $(&quot;#mylist&quot;),</div><div class="line">top_100_li = &quot;&quot;; // 这个变量用来存储变化的字符串</div><div class="line">for (var i=0, l=top_100_list.length; i&lt;l; i++)&#123;</div><div class="line">    top_100_li += &quot;&lt;li&gt;&quot; + top_100_list[i] + &quot;&lt;/li&gt;&quot;;</div><div class="line">&#125; </div><div class="line">$mylist.html(top_100_li);// DOM操作只有这么一次</div></pre></td></tr></table></figure></p>
<p><strong> 2.使用局部变量存储DOM节点的引用 </strong><br>如果需要多次访问某个DOM节点，使用局部变量存储它的引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var sub_order_id =$(checkbox[i]).closest(&quot;tr&quot;).find(&quot;input[class=&apos;sub_order_id&apos;]&quot;).val();</div><div class="line">var ticket_id = $(checkbox[i]).closest(&quot;tr&quot;).find(&quot;input[class=&apos;ticket_id&apos;]&quot;).val();</div><div class="line">var price = $(checkbox[i]).closest(&quot;tr&quot;).find(&quot;input[class=&apos;ticket_price&apos;]&quot;).val();</div><div class="line">改良后↓</div><div class="line">var tr = $(checkbox[i]).closest(&quot;tr&quot;);</div><div class="line">var sub_order_id = tr.find(&quot;input[class=&apos;sub_order_id&apos;]&quot;).val();</div><div class="line">var ticket_id = tr.find(&quot;input[class=&apos;ticket_id&apos;]&quot;).val();</div><div class="line">var price = tr.find(&quot;input[class=&apos;ticket_price&apos;]&quot;).val();</div></pre></td></tr></table></figure></p>
<p><strong>３.把集合的长度缓存到变量中,并在迭代中使用它</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(var i = 0,len = array.length; i &lt; len; i++ )&#123;</div><div class="line">	//alert(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 4.使用事件委托减少事件处理器的数量 </strong></p>
<p>那什么是事件委托，可参考我的其中一篇博文，<a href="https://zylyanzi.github.io/2017/01/11/js_event/" target="_blank" rel="external">js事件委托</a></p>
<h3 id="四、-算法和控制流程"><a href="#四、-算法和控制流程" class="headerlink" title="四、 算法和控制流程"></a>四、 算法和控制流程</h3><p><strong> 1. 避免使用 <code>for-in</code> 循环 </strong><br>数组一定不要 用 <code>for-in</code> 循环，除非遍历个属性数量未知的对象<br><strong> 2. 避免使用多重循环 </strong><br>改善性能最佳方式就是减少每次迭代的运算量和减少循环迭代的次数<br><strong> 3. 正确使用 <code>switch</code>和<code>if-else</code> </strong><br>通常来说，<code>switch</code>是比<code>if-else</code>更快，但是在条件数量很大时才明显，所以通常，条件数量少的时候使用 <code>if-else</code></p>
<h3 id="五、-实践中"><a href="#五、-实践中" class="headerlink" title="五、 实践中"></a>五、 实践中</h3><p><strong> 1. 尽量使用直接量创建对象和数组</strong><br>直接量的创建和初始化都比非直接量形式要快<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = new Object();</div><div class="line">arr.name = “yanzi”</div><div class="line">arr.age= 20</div><div class="line">arr.sex = “girl”</div><div class="line">改良后↓</div><div class="line">var arr = &#123;</div><div class="line">name :”yanzi”,</div><div class="line">age:20,</div><div class="line">sex:”girl”</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong> 2. 考虑使用位运算 进行数学计算 </strong><br>但是位运算感觉容易出错，而且比较复杂，所以我基本不用，嘿嘿。。。<br><strong> 3. 尽量使用javascript的原生方法 </strong></p>
<h3 id="六、-构建和部署（最重要的方面）"><a href="#六、-构建和部署（最重要的方面）" class="headerlink" title="六、 构建和部署（最重要的方面）"></a>六、 构建和部署（最重要的方面）</h3><p><strong> 1. 减少http请求次数 </strong><br>网站提速最重要的一条规则就是减如少页面渲染所需的http请求数。每次http请求都需要建立通信链路、进行数据传输，而在服务器端，每个http都需要启动独立的线程去处理。</p>
<p><strong> 2. 合并压缩 </strong><br>减少http请求次数，合并多个图片，<code>js</code>和<code>css</code>文件。比如加载一个页面，果有5个<code>css</code>文件的话，那么会发出5次http请求，这样会让用户第一次访问你的页面的时候会长时间等待。而如果把这个5个文件合成一个的话，就只需要发出一次http请求，节省网络请求时间，加快页面的加载。合并<code>css</code>图片，使用<code>Sprites</code>。<br><code>Javascript</code>压缩，可以把文件中与运行无关的部分进行剥离，比如包括注释和不必要的空白字符。这样的过程通常可以将文件大小减半，使文件更快的被下载，缩小请求返回的数据量。</p>
<p><strong> 3. 使用构建工具，比如gulp </strong><br>在构建时能完成的工作就不要留到 运行中，像合并，压缩，预处理这些步骤最好都是在构建时先完成。</p>
<p><strong> 4. 避免空的src和href </strong><br>当<code>link</code>标签的<code>href</code>属性为空、<code>script</code>标签的<code>src</code>属性为空的时候，浏览器渲染的时候会把当前页面的URL作为它们的属性值，从而把页面的内容加载进来作为它们的值。所以要避免犯这样的疏忽。</p>
<p><strong> 5. 避免使用CSS表达式和内联的CSS样式 </strong><br>将<code>CSS</code>和<code>JS</code>放到外部文件中，目的是缓存文件。 但有时候为了减少请求，也会直接写到页面里，这个需根据PV和IP的比例权衡。</p>
<p><strong> 6. 图片使用延时加载 </strong><br>我现在的做法是，将图片的src用占位符图片代替，并使用data-src属性保存真实的图片地址，然后监控window的scroll事件，当图片出现在屏幕中时，就将data-src的值赋值给src。</p>
<p><strong> 7. 设置缓存 </strong><br>当用户在浏览器的地址栏中敲入了网站的网址 ( 比如 google.com ) ,浏览器首先会通过访问的域名来定位到IP (DNS) 从而找到去哪里获取资源, 这时, 浏览器会依次进行如下查找：</p>
<ul>
<li>浏览器缓存 </li>
<li>系统缓存</li>
<li>路由器缓存</li>
<li>ISP DNS缓存</li>
<li>递归搜索…<br>所以对一个网站而言，设置缓存是必要的。特别是像<code>CSS</code>、<code>javascript</code>、<code>logo</code>、图标这些静态资源文件更新的频率都比较低，而这些文件又几乎是每次http请求都需要的，如果将这些文件缓存在浏览器中，它可以极好的改善性能。<br>设置缓存的原创很简单，能缓存越多越好，能缓存越久越好。通过设置http头中的<code>cache-control</code>和<code>expires</code>的属性，可设定浏览器缓存，缓存时间可以是数天，甚至是几个月。<br>例如，很少变化的图片资源可以直接通过 HTTP Header中的<code>Expires</code>设置一个很长的过期头 ;变化不频繁而又可能会变的资源可以使用 <code>Last-Modifed</code>来做请求验证。尽可能的让资源能够在缓存中待得更久。</li>
<li>为文件头指定<code>Expires</code><br><code>Exipres</code>是用来设置文件的过期时间的，一般对<code>css</code>、<code>js</code>、图片资源有效。 他可以使内容具有缓存性，这样下回再访问同样的资源时就通过浏览器缓存区读取，不需要再发出http请求。</li>
<li>配置ETags<br>响应头部中会包含一个ETag的信息，它用来判断浏览器缓存里的元素是否和原来服务器上的一致。比<code>last-modified</code>更具有弹性，例如某个文件在1秒内修改了10次，Etag可以综合Inode(文件的索引节点(inode)数)，MTime(修改时间)和Size来精准的进行判断，避开UNIX记录MTime只能精确到秒的问题。 服务器集群使用，可取后两个参数。使用ETags减少Web应用带宽和负载。<br>浏览器请求具体过程可看下图：<br><img src="/uploads/WEBEtag.png" alt="04"></li>
</ul>
<p><strong> 值得注意的是：</strong> 适当的缓存可以提升用户体验，但是有个缺点，当应用升级时，我们要把用户缓存的静态资源更新。这个可以通过静态资源重命名解决，一般我们是给文件增加一个版本号或者开发编号。还有就是不宜一次更新全部文件，应该一个个逐步更新，忽然大量缓存失效，会使服务器负载骤增，网络堵塞的</p>
<p><strong> 8. 权衡DNS查找次数 </strong><br>我们来分析一下浏览器与服务器之间一次典型的通信过程.</p>
<ul>
<li>DNS 查询</li>
<li>TCP 连接</li>
<li>HTTP 请求与响应<br>所以减少主机名会节省响应时间，但是同时也会减少并行的下载数量，<code>IE</code>浏览器同一时刻只能从同一域名下载两个文件，所以会影响下载速度。所以我们可以用多个域名来存放图片，例如可以看下新浪微博的图片存放。你会发现有的图片的地址是 <a href="http://tva2.sinaimg.cn/，" target="_blank" rel="external">http://tva2.sinaimg.cn/，</a> 有的图片则是 <a href="http://ww2.sinaimg.cn/" target="_blank" rel="external">http://ww2.sinaimg.cn/</a></li>
</ul>
<p><strong> 9. 使用内容分发网络（CDN）  </strong><br>CDN（contentdistribute network，内容分发网络）的本质仍然是一个缓存，而且<strong> 将数据缓存在离用户最近的地方 </strong>，使用户以最快速度获取数据。CDN缓存的一般是静态资源，如图片、文件、<code>CSS</code>、<code>script</code>脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度。</p>
<p><strong> 10. 使用<code>GET</code>来完成<code>AJAX</code>请求 </strong><br>当使用<code>XMLHttpRequest</code>时，浏览器中的<code>POST</code>方法是一个“两步走”的过程：首先发送文件头，然后才发送数据。因此使用<code>GET</code>获取数据时更加有意义。当数据量小的时候使用    GET    ，超过2048个字节的时候用<code>POST</code>。因为ie限制<code>URL</code>长度，过长会导致<code>URL</code>被截断</p>
<p><strong> 11. 避免使用 eval和 Function 构造函数  </strong><br>会导致双重求值得性能消耗</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[标准W3C盒子模型和IE(IE6及其以前)盒子模型]]></title>
      <url>http://yoursite.com/2017/07/12/w3c_box/</url>
      <content type="html"><![CDATA[<p>盒模型：content，padding。border，margin</p>
<p>W3C盒子模型和IE(IE6及其以前)盒子模型的区别是，IEcontent部分包含了padding和border。</p>
<a id="more"></a>
<p>比如：一个盒子，content的宽为100px，高为50px；padding是10px；border是2px；margin是20px；<br>W3C盒子模型解释盒子占据的位置为：宽 100+10<em>2+2</em>2+20<em>2=164  高 50+10</em>2+2<em>2+20</em>2=114<br>W3C盒子模型解释盒子实际大小为：宽 100+10<em>2+2</em>2=124   高 50+10<em>2+2</em>2 = 74<br>IE盒子模型解释盒占据的位置为：宽 100+20<em>2= 140 高 50+20</em>2= 90<br>IE盒子模型解释盒实际大小为：宽 100 高 50</p>
<p>那么应该选择哪种盒子模型呢？当然是标准W3C盒子模型啦！所以加上doctype声明，所有浏览器都会采用标准W3C盒子模型，网页就能在各个浏览器中显示一致了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的 Vue实践 项目]]></title>
      <url>http://yoursite.com/2017/07/12/vue_project/</url>
      <content type="html"><![CDATA[<h3 id="本文的主要内容如下："><a href="#本文的主要内容如下：" class="headerlink" title="本文的主要内容如下："></a>本文的主要内容如下：</h3><blockquote>
<ul>
<li>安装插件</li>
<li>组件的结构</li>
<li>组件的应用</li>
<li>路由的应用</li>
<li>用mock.js模拟数据</li>
<li>编译</li>
</ul>
</blockquote>
<a id="more"></a>
<p>如果还没有搭建Vue的项目环境，请参考<a href="">vue-cli构建vue项目</a><br>关于Vue是什么，以及它的基本语法，请参考<a href="https://vuefe.cn/v2/guide/" target="_blank" rel="external">Vue.js</a>的官方文档介绍。</p>
<p>图解MVVM（Model-View-ViewModel）模式的Vue：<br><!-- more --><br><img src="http://oi5lhmcye.bkt.clouddn.com/01.jpg" alt="MVVM"></p>
<h3 id="现在开始Vue实践之旅啦"><a href="#现在开始Vue实践之旅啦" class="headerlink" title="现在开始Vue实践之旅啦"></a>现在开始Vue实践之旅啦</h3><h3 id="1-首先，先来安装几个插件（后面会说用来干嘛的）"><a href="#1-首先，先来安装几个插件（后面会说用来干嘛的）" class="headerlink" title="1.首先，先来安装几个插件（后面会说用来干嘛的）"></a>1.首先，先来安装几个插件（后面会说用来干嘛的）</h3><p>npm install vue-router –save<br>npm install vue-resource –save<br>npm install mockjs –save<br>(<em> –save 可以让该插件显示在 package.json 的dependencies中</em>)</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/04.png" alt="04"></p>
<h3 id="2-打开工程目录下的App-vue"><a href="#2-打开工程目录下的App-vue" class="headerlink" title="2.打开工程目录下的App.vue"></a>2.打开工程目录下的App.vue</h3><p>template 写 html，script写 js，style写样式</p>
<h3 id="3-组件的应用"><a href="#3-组件的应用" class="headerlink" title="3.组件的应用"></a>3.组件的应用</h3><p>组件系统是Vue的重要概念，我们可以用小的组件来构建大型的应用，任意个应用界面我们都可以抽象成一个组件树。<br><img src="http://oi5lhmcye.bkt.clouddn.com/05.png" alt="05"><br>在 Vue 里，一个组件实质上是一个拥有预定义选项的一个 Vue 实例。</p>
<p>创建个组件：在工程<code>/src/component</code>文件夹下，创建个<code>First.vue</code>文件，并仿照<code>App.vue</code>的格式 写第一个组件<br><img src="http://oi5lhmcye.bkt.clouddn.com/06.png" alt="06"></p>
<p>然后在 App.vue 使用组件 ( 因为在 <code>index.html</code> 里面定义了<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>所以就以这个组件作为主入口，方便 )</p>
<p><strong> 第一步，引入。</strong><br>在<code>&lt;script&gt;&lt;/script&gt;</code>标签内写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import First from &apos;./components/First&apos;</div></pre></td></tr></table></figure></p>
<p><strong> 第二步，注册。</strong><br>在<code>&lt;script&gt;&lt;/script&gt;</code>标签内的 <code>components</code> 加上 引入的组件 <code>First</code> 记得中间加英文逗号!!!</p>
<p><strong>第三步，使用。</strong><br>在<code>&lt;template&gt;&lt;/template&gt;</code>内加上 <code>&lt;first&gt;&lt;/first&gt;</code><br><img src="http://oi5lhmcye.bkt.clouddn.com/07.png" alt="07"><br>这时你会看到浏览器的页面效果显示如下：<br><img src="http://oi5lhmcye.bkt.clouddn.com/08.png" alt="08"></p>
<h3 id="4-路由的应用"><a href="#4-路由的应用" class="headerlink" title="4.路由的应用"></a>4.路由的应用</h3><p>前面已经装好了vue-router，<br>使用 vue-router 搭建单页应用，主要有五步：</p>
<blockquote>
<ul>
<li>创建组件</li>
<li>创建路由</li>
<li>创建和挂载实例</li>
<li>渲染匹配的组件</li>
<li><code>&lt;router-link&gt;</code>组件跳转到指定路径</li>
<li>页面呈现，噢啦</li>
</ul>
</blockquote>
<p><strong> 第一步，创建组件 </strong><br>在 <code>src</code> 下新建文件夹 <code>views</code> ，在该文件夹下新建两个文件 <code>PageOne.vue</code> ,<code>PageTwo.vue</code><br>为了方便 <code>PageOne.vue</code> 我们直接复制 为了方便 <code>App.vue</code> 的代码，<code>PageTwo.vue</code> 复制  <code>First.vue</code> 的代码</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/09.png" alt="09"></p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/10.png" alt="10"></p>
<p><strong> 第二步，创建路由 </strong><br>在 <code>src</code> 下新建文件夹 <code>js</code> ，在该文件夹下新建 <code>vue-router.js</code> 文件<br>在这里创建路由（粘贴的代码图中都有注释，我就不一一解释了哈！！！！）<br><img src="http://oi5lhmcye.bkt.clouddn.com/11.png" alt="11"></p>
<p><strong> 第三步，创建和挂载实例 </strong><br>修改 <code>main.js</code><br><img src="http://oi5lhmcye.bkt.clouddn.com/12.png" alt="12"></p>
<p><strong> 第四步，在页面上使用<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签，渲染匹配的组件。</strong><br>修改 <code>App.vue</code><br><img src="http://oi5lhmcye.bkt.clouddn.com/13.png" alt="13"></p>
<p><strong> 第五步：使用<code>&lt;router-link&gt;</code>组件跳转到指定路径 </strong><br>注意！！！在Vue 2中，<code>v-link</code>指令已经被一个新的<code>&lt;router-link&gt;</code> 组件指令替代<br><img src="http://oi5lhmcye.bkt.clouddn.com/14.png" alt="14"></p>
<p>最后你会看到下面的效果，点击 下面的 who are you ？ 跳转到 <a href="http://localhost:8080/PageTwo：" target="_blank" rel="external">http://localhost:8080/PageTwo：</a></p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/15.png" alt="15"></p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/16.png" alt="16"></p>
<h3 id="5-用mock-js模拟数据"><a href="#5-用mock-js模拟数据" class="headerlink" title="5.用mock.js模拟数据"></a>5.用mock.js模拟数据</h3><p><strong> 新建Mock.js文件 </strong><br>在 <code>src/js</code> 新建 <code>Mock.js</code> 文件<br>内容如下：<br>Mock.mock 是 Mock的方法，第一个参数自定义的url（也就是接口），后面的参数可自定义配置。<br>具体配置参数编写，可参考<a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="external">Mock.js</a>.</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/17.png" alt="17"></p>
<p><strong> 引入<code>Mock.s</code> 和 <code>vue-resource</code></strong><br>在 <code>main.js</code> 引入</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/18.png" alt="18"></p>
<p><strong> 输出数据 </strong><br>我们在 <code>First.vue</code> 上来动态加载数据</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/18.png" alt="19"></p>
<p>duang，duang，duang!!!!现在可以看到页面上有数据啦：</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/20.png" alt="20"></p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/21.png" alt="21"></p>
<h3 id="6-编译"><a href="#6-编译" class="headerlink" title="6.编译"></a>6.编译</h3><p>npm run build</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli构建vue项目]]></title>
      <url>http://yoursite.com/2017/07/12/vue/</url>
      <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong> 1. 安装node.js </strong></p>
<p><strong> 2.安装vue-cli </strong><br>npm install -g vue-cli<br><a id="more"></a><br><strong> 3.使用vue-cli初始化项目 </strong><br>vue init webpack vue-test</p>
<p>设置介绍<br><img src="http://oi5lhmcye.bkt.clouddn.com/002.jpg" alt="002"><br>Project name 项目名称<br>project des 项目描述<br>Autor 项目作者</p>
<p>一般推荐下面项直接选择 No，嘻嘻！！新手入门，先别整那么复杂<br><em>eslint</em>是个代码规范检查工具</p>
<p><strong> 4.进到目录 </strong><br>cd vue-test(yours-project-name)</p>
<p><strong> 5.安装依赖 </strong><br>npm install</p>
<p><strong> 6.开始运行 </strong><br>npm run dev<br>浏览器会直接打开你的项目，你会进到一个hello world的起始页！到这里为止，你得环境就已经搭好了，，<br><img src="http://oi5lhmcye.bkt.clouddn.com/03.png" alt="03"></p>
<p>Vue项目实践请参考<a href="">一个简单的 Vue实践 项目</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[整理几点编辑静态页面的 整体思路和技巧]]></title>
      <url>http://yoursite.com/2017/07/12/static_html/</url>
      <content type="html"><![CDATA[<p>1、  先写大体框架，分区域</p>
<p>2、  Ps，F2选取图层当前大小</p>
<p>3、  切图，转化为智能对象，双击</p>
<a id="more"></a>
<p>4、  背景透明，有阴影过渡效果的用png，不能用gif</p>
<p>5、  单色，要求不高，用gif，比较小</p>
<p>6、  按住ctr键，单击图层图标，然后出现该图层选区</p>
<p>7、  选择-》载入选区-》新建，ctrl+shift+c（选区与实际大小不相符的时候）</p>
<p>8、  色彩丰富用jpg</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm 7.0结合 file watchers sass/scss自动编译]]></title>
      <url>http://yoursite.com/2017/07/12/php_sass02/</url>
      <content type="html"><![CDATA[<p>1.ctrl+alt+s，调出settings，搜索 File Watchers，添加SCSS</p>
<p>2.设置可以看下图，要注意的是 [Program] 最好指定具体目录,用环境变量 $RUBY_HOME$\scss.bat,会出错</p>
<p>3.Arguments 就是写上sass/scss支持的 语法 例如 –style compressed test.sass test.css,</p>
<p>上图的配置是scss源目录+css生成目录，如下：</p>
<p>–style expanded $FileDir$\$FileName$ $FileParentDir$\css\$FileNameWithoutExtension$.css</p>
<p><img src="/uploads/php/sass_07.jpg" alt="sass_07"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm安装 SASS、SCSS + Compass]]></title>
      <url>http://yoursite.com/2017/07/12/php_sass/</url>
      <content type="html"><![CDATA[<h3 id="1-安装-PHPStorm-的-SASS-插件"><a href="#1-安装-PHPStorm-的-SASS-插件" class="headerlink" title="1. 安装 PHPStorm 的 SASS 插件"></a>1. 安装 PHPStorm 的 SASS 插件</h3><p>好像是自带了该插件的，如果没有的话，就打开 setting -&gt; plugins  自己安装一个吧，就不多说了<br><img src="http://oi5lhmcye.bkt.clouddn.com/sass_01.png" alt="sass_01"></p>
<h3 id="2-安装-Ruby"><a href="#2-安装-Ruby" class="headerlink" title="2. 安装 Ruby"></a>2. 安装 Ruby</h3><p>Windows 版本下载地址：<br><a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">http://rubyinstaller.org/downloads/</a><br>Linux or Mac 地址：<br><a href="http://ruby.taobao.org/mirrors/ruby/" target="_blank" rel="external">http://ruby.taobao.org/mirrors/ruby/</a><br>我用的是 windows 版最新的 2.2.1 版本<br>配置好系统环境，将ruby 的bin目录绝对路径添加到 path 环境变量中，windows版安装的时候可以勾选自动添加<br>可参考这片博文：<br><a href="http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html" target="_blank" rel="external">http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html</a></p>
<a id="more"></a>
<h3 id="3-安装-SASS-和-Compass"><a href="#3-安装-SASS-和-Compass" class="headerlink" title="3. 安装 SASS 和 Compass"></a>3. 安装 SASS 和 Compass</h3><p>你可能需要重新设置下更新源地址：<br>命令行下执行：<br>[plain] view plain copy</p>
<p>在CODE上查看代码片派生到我的代码片<br>gem sources –remove <a href="https://rubygems.org/" target="_blank" rel="external">https://rubygems.org/</a><br>gem sources -a <a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a><br>（这里不能 <a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a> 源可能用不了了，可以用 <a href="http://gems.ruby-china.org）" target="_blank" rel="external">http://gems.ruby-china.org）</a></p>
<p>可以参考下这篇文章：<br><a href="http://devework.com/sass-compass.html" target="_blank" rel="external">http://devework.com/sass-compass.html</a><br>下面执行安装啦：<br>[plain] view plain copy</p>
<p>在CODE上查看代码片派生到我的代码片<br>gem install sass<br>gem install compass  </p>
<h3 id="4-新建-Compass-SASS-项目"><a href="#4-新建-Compass-SASS-项目" class="headerlink" title="4. 新建 Compass + SASS 项目"></a>4. 新建 Compass + SASS 项目</h3><p>创建一个项目根目录，cd 进入后，执行：<br>compass create your_project_name<br><img src="http://oi5lhmcye.bkt.clouddn.com/sass_03.png" alt="sass_03"><br>会生成三个文件夹和一个 config.rb 文件<br>在 sass 目录下存放我们自己的样式代码，编译后会自动生成到 stylesheets 目录下，当然你也可以自定义生成地址</p>
<h3 id="5-配置-Compass-编译环境"><a href="#5-配置-Compass-编译环境" class="headerlink" title="5. 配置 Compass 编译环境"></a>5. 配置 Compass 编译环境</h3><p>打开 setting -&gt; Language &amp; Framework 下面有个 Compass<br><img src="http://oi5lhmcye.bkt.clouddn.com/sass_04.png" alt="sass_04"><br>勾选 Enable 后 设置你自己安装的 ruby  comopass.bat 路径 和 当前项目的 config.rb 文件路径</p>
<h3 id="6-配置-SASS-环境"><a href="#6-配置-SASS-环境" class="headerlink" title="6. 配置 SASS 环境"></a>6. 配置 SASS 环境</h3><p>打开 setting -&gt; Tools -&gt; FileWatchers<br>点击右侧绿色的加号 添加一个 compass scss 项目，配置如下<br><img src="http://oi5lhmcye.bkt.clouddn.com/sass_05.png" alt="sass_05"></p>
<p>应该使用默认的配置就可以的了。<br>working directory 就是你 刚才用 compass create 的项目目录（我这里只是文件夹名字是 less 不要误解了啊）</p>
<h3 id="7-开始写代码了"><a href="#7-开始写代码了" class="headerlink" title="7. 开始写代码了"></a>7. 开始写代码了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@import &quot;compass/reset&quot;;  </div><div class="line">@import &quot;compass&quot;;  </div><div class="line">  </div><div class="line">$fc: #FFF;  </div><div class="line">$fs: 16px;  </div><div class="line">  </div><div class="line">body &#123; background-color: #555; &#125;  </div><div class="line">  </div><div class="line">#panel &#123;  </div><div class="line">  color: $fc;  </div><div class="line">  font-size: $fs;  </div><div class="line">  .title &#123;  </div><div class="line">    padding: 1em;  </div><div class="line">    background-color: #888;  </div><div class="line">    color: $fc;  </div><div class="line">  &#125;  </div><div class="line">  .item &#123;  </div><div class="line">    float: left;  </div><div class="line">    width: 49%;  </div><div class="line">    min-height: 3em;  </div><div class="line">    padding: 1em;  </div><div class="line">    margin: 1.5%;  </div><div class="line">    border: solid 1px $fc;  </div><div class="line">    box-sizing: border-box;  </div><div class="line">    background-color: #999;  </div><div class="line">    @include box-shadow(1px 2px 3px #000);  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个简单的测试代码，每次更改后，会自动编译，但不会自动生成 css 文件的，你可以在命令行下进行生成<br>命令如下：<br>compass compile<br>或者强制编译更新:<br>compass compile –force</p>
<p>然后你再看看 stylesheets 下面就多出一个对应名称的 css 文件<br>这个代码会有很大一堆我就不上代码了，包含了 reset 的样式和你自己的样式 还有注释都保留了的，因为这是开发环境，<br>如果是正式环境，需要进行压缩<br>下面来改下配置，进入正式环境，将生成的代码压缩成一行<br>打开项目根目录下的 config.rb 文件<br>添加两行代码：<br>environment = :development<br>output_style = (environment == :production) ? :compressed : :expanded  </p>
<p>当 environment 为 :production 时生成的 css 文件将会是压缩成一行的样子了。</p>
<p>好了 全部完成，现在开始快速开发你自己的 css 吧<br>如果你只需要用 SCSS 的话，在第6步你可以新建 SCSS 配置，下面是配置截图<br><img src="http://oi5lhmcye.bkt.clouddn.com/sass_06.png" alt="sass_06"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[phpstorm配置Xdebug进行调试]]></title>
      <url>http://yoursite.com/2017/07/12/php_debug/</url>
      <content type="html"><![CDATA[<h3 id="1、下载xdebug文件"><a href="#1、下载xdebug文件" class="headerlink" title="1、下载xdebug文件"></a>1、下载xdebug文件</h3><p><a href="http://xdebug.org/download.php（注：如果开发环境里装了xampp，其集成了php的开发平台，可以不用下载，省略这步）" target="_blank" rel="external">http://xdebug.org/download.php（注：如果开发环境里装了xampp，其集成了php的开发平台，可以不用下载，省略这步）</a></p>
<h3 id="2、配置php-ini，在末尾加上"><a href="#2、配置php-ini，在末尾加上" class="headerlink" title="2、配置php.ini，在末尾加上"></a>2、配置php.ini，在末尾加上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">zend_extension = &quot;D:\xampp\php\ext\php_xdebug.dll&quot;//xdebug文件的所在路径</div><div class="line">xdebug.profiler_append = 0</div><div class="line">xdebug.profiler_enable = 1</div><div class="line">xdebug.profiler_enable_trigger = 0</div><div class="line">xdebug.profiler_output_name = &quot;cachegrind.out.%t-%s&quot;</div><div class="line">xdebug.remote_handler = &quot;dbgp&quot;</div><div class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</div><div class="line">xdebug.trace_output_dir = &quot;D:\xampp\tmp&quot;</div><div class="line">xdebug.remote_enable = On</div><div class="line">xdebug.remote_handler = dbgp</div><div class="line">xdebug.remote_port = 9000//服务器监听端口</div><div class="line">xdebug.idekey = PHPSTORM//调试器的关键字，在phpstrom配置时要用到</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3、验证Xdebug是否安装成功"><a href="#3、验证Xdebug是否安装成功" class="headerlink" title="3、验证Xdebug是否安装成功"></a>3、验证Xdebug是否安装成功</h3><p>查看phpinfo，查看xdebug的参数设置。<br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_01.jpg" alt="debug_01"></p>
<h3 id="4、phpstorm中Debug配置"><a href="#4、phpstorm中Debug配置" class="headerlink" title="4、phpstorm中Debug配置"></a>4、phpstorm中Debug配置</h3><p>File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP<br>首先要配置PHP解释器的路径（曾经因为没配解释器路径Xdebug一直运行不成功）</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/debug_02.png" alt="debug_02"></p>
<p>File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP&gt;Debug<br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_03.png" alt="debug_03"><br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_04.png" alt="debug_04"></p>
<h3 id="5、phpstorm中服务器配置"><a href="#5、phpstorm中服务器配置" class="headerlink" title="5、phpstorm中服务器配置"></a>5、phpstorm中服务器配置</h3><p><img src="http://oi5lhmcye.bkt.clouddn.com/debug_05.jpg" alt="debug_05"></p>
<h3 id="6、设置debug"><a href="#6、设置debug" class="headerlink" title="6、设置debug"></a>6、设置debug</h3><p>添加PHP Web Application<br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_06.png" alt="debug_06"><br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_07.png" alt="debug_07"><br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_08.png" alt="debug_08"></p>
<h3 id="7、到这里，目前phpStorm-xdebug的配置基本完成了，现在来开始调试了"><a href="#7、到这里，目前phpStorm-xdebug的配置基本完成了，现在来开始调试了" class="headerlink" title="7、到这里，目前phpStorm+xdebug的配置基本完成了，现在来开始调试了"></a>7、到这里，目前phpStorm+xdebug的配置基本完成了，现在来开始调试了</h3><p>打开电话监听按钮，打好一个断点，选择Application，点击甲壳虫按钮。<br><img src="http://oi5lhmcye.bkt.clouddn.com/debug_09.png" alt="debug_09"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js动态添加DOM，绑定事件会重复执行]]></title>
      <url>http://yoursite.com/2017/07/12/on_event/</url>
      <content type="html"><![CDATA[<p>使用动态 js 添加DOM，同时对加入的内容绑定点击事件的时候。该<strong>事件会重复执行</strong><br>比如：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div class=&quot;checkbox1&quot;&gt;</div><div class="line">      &lt;h1&gt;这是个标题&lt;/h1&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;div class=&quot;change&quot; style=&quot;cursor: pointer;color: red;&quot;&gt;点击添加一个标题&lt;/div&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;js/components.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      $(&quot;.change&quot;).click( function () &#123;</div><div class="line">          $(&quot;.checkbox1&quot;).append(&apos;&lt;div class=&quot;check-all&quot;&gt;&lt;span&gt;&lt;h2&gt;这是另外一个标题&lt;/h2&gt;&lt;/span&gt;&lt;/div&gt;&apos;);</div><div class="line">          //$(&quot;.check-all span&quot;).off(&quot;click&quot;);</div><div class="line">          $(&quot;.check-all span&quot;).click(function () &#123;</div><div class="line">              console.log(&quot;a&quot;);</div><div class="line">          &#125;)</div><div class="line">          /* $(&quot;.check-all span&quot;).unbind(&quot;click&quot;).click(function()&#123;</div><div class="line">           console.log(&quot;ss&quot;);</div><div class="line">           &#125;);*/</div><div class="line">          /* $(&quot;.checkbox1&quot;).on(&quot;click&quot;, &quot;.check-all span&quot;, function () &#123;</div><div class="line">           console.log(&quot;ss&quot;);</div><div class="line">           &#125;);*/</div><div class="line">      &#125;);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>你添加两次标题的时候，你会发现，console 台输出了2次 a。<br>解决办法如下：<br>1、在 绑定事件之前，对该事件解绑，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&quot;.check-all span&quot;).off(&quot;click&quot;);</div><div class="line">          $(&quot;.check-all span&quot;).click(function () &#123;</div><div class="line">              console.log(&quot;aa&quot;);</div><div class="line">          &#125;)</div></pre></td></tr></table></figure></p>
<p>2、unbind(‘click’)上一次的click事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;.check-all span&quot;).unbind(&quot;click&quot;).click(function()&#123;</div><div class="line">           console.log(&quot;ss&quot;);</div><div class="line">           &#125;);</div></pre></td></tr></table></figure></p>
<p>建议：不要通过on的方式绑定事件，这种方式会将原来的方法添加到新方法中，就会出现执行多次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;.checkbox1&quot;).on(&quot;click&quot;, &quot;.check-all span&quot;, function () &#123;</div><div class="line">           console.log(&quot;ss&quot;);</div><div class="line">           &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular 引入第三方库]]></title>
      <url>http://yoursite.com/2017/07/12/ng_chajian/</url>
      <content type="html"><![CDATA[<p>如果我们在开发Angular应用的时候想使用第三方的库，比如jQuery或bootstrap等，该如何去引入并使用呢？<br>主要通过三步：</p>
<a id="more"></a>
<p><strong> 1、下载 </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install jquery –-save-dev</div><div class="line">$ npm install bootstrap –-save-dev</div></pre></td></tr></table></figure>
<p>打开，package.json 文件，你会发现列出的依赖中加上了 jquery，bootstrap。</p>
<p><strong> 2、引入 </strong></p>
<p>打开.angular-cli.json这个文件，可以看到 app 中有个styles数组和scripts数组。<br>“styles”里面存放要引入的css<br>“scripts”里面存放要引入的js</p>
<p>要引入第三方的包，首先要知道引入文件的路径，下载的这些包，会存放在node_modules目录中。找到路径，写入scripts中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;styles&quot;: [</div><div class="line">        &quot;styles.css&quot;,</div><div class="line">        &quot;../node_modules/bootstrap/dist/css/bootstrap.css&quot;</div><div class="line">      ],</div><div class="line">      &quot;scripts&quot;: [</div><div class="line">        &quot;../node_modules/jquery/dist/jquery.js&quot;,</div><div class="line">        &quot;../node_modules/bootstrap/dist/js/bootstrap.js&quot;</div><div class="line">      ],</div></pre></td></tr></table></figure></p>
<p>** 3、安装类型描述文件 </p>
<p>因为Angular是使用TypeScript语言开发的，而jquery本质是JavaScript，TypeScript是不能直接使用的。<br>我们需要先安装类型描述文件，让TypeScript认识jquery。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install @types/jquery -–save-dev</div><div class="line">$ npm install @types/bootstrap -–save-dev</div></pre></td></tr></table></figure></p>
<p><strong> 最后，讲一下，我在安装过程中遇到的巨坑。</strong></p>
<p>安装完 jquery类型描述文件之后 ，运行一直报错，江山一片红，出现如下提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ERROR in C:/Users/yanling.zhong/data-center/node_modules/@types/bootstrap/index.</div><div class="line">d.ts (114,32): Generic type &apos;JQuery&lt;TElement, HTMLElement&gt;&apos; requires 2 type argu</div><div class="line">ment(s).</div><div class="line"></div><div class="line">ERROR in C:/Users/yanling.zhong/data-center/node_modules/@types/bootstrap/index.</div><div class="line">d.ts (116,42): Generic type &apos;JQuery&lt;TElement, HTMLElement&gt;&apos; requires 2 type argu</div><div class="line">ment(s).</div><div class="line"></div><div class="line">ERROR in C:/Users/yanling.zhong/data-center/node_modules/@types/bootstrap/index.</div><div class="line">d.ts (117,32): Generic type &apos;JQuery&lt;TElement, HTMLElement&gt;&apos; requires 2 type argu</div><div class="line">ment(s).</div><div class="line"></div><div class="line">ERROR in C:/Users/yanling.zhong/data-center/node_modules/@types/bootstrap/index.</div><div class="line">d.ts (119,44): Generic type &apos;JQuery&lt;TElement, HTMLElement&gt;&apos; requires 2 type argu</div><div class="line">ment(s).</div><div class="line"></div><div class="line">ERROR in C:/Users/yanling.zhong/data-center/node_modules/@types/bootstrap/index.</div><div class="line">d.ts (121,36): Generic type &apos;JQuery&lt;TElement, HTMLElement&gt;&apos; requires 2 type argu</div><div class="line">ment(s).</div></pre></td></tr></table></figure></p>
<p>找了很久发现是 @types/jquery 的版本问题，默认安装的是3.2.6版本。<br>现在安装2.0.39版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install @types/jquery@2.0.39 -–save-dev</div></pre></td></tr></table></figure></p>
<p>再运行，没有问题了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular Cli 构建 Angular 项目]]></title>
      <url>http://yoursite.com/2017/07/12/ng/</url>
      <content type="html"><![CDATA[<h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p><strong> 基础工具安装 </strong></p>
<p>NodeJS 5.0以上版本,NPM 3.0以上版本；Typescript。</p>
<p><strong> 安装Angular Cli </strong><br>有两种方式安装：</p>
<ol>
<li><p>第一种安装方式，通过淘宝镜像，这种安装会比较快速。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org   //先安装cpm</div><div class="line">$ cnpm install -g @angular/cli   //用cnpm安装 Angular Cli</div></pre></td></tr></table></figure>
</li>
<li><p>第二种安装方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g angular-cli</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<p><strong> 注意事项 </strong><br>如果之前安装失败一定要卸载干净。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall -g angular-cli</div><div class="line">$ npm cache clean</div></pre></td></tr></table></figure></p>
<p>找到 C:\Users\Administrator\AppData\Roaming\npm ，把ng和ng.cmd也删除</p>
<p><strong> 测试 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ng -v</div></pre></td></tr></table></figure></p>
<p>显示版本信息，表示安装成功</p>
<h3 id="二、Angular-Cli常用命令"><a href="#二、Angular-Cli常用命令" class="headerlink" title="二、Angular Cli常用命令"></a>二、Angular Cli常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ng new project-name //创建项目</div><div class="line">$ ng serve //编译，启动服务器</div><div class="line">$ ng serve --port 4201 //默认端口是4200 ，修改端口 </div><div class="line">$ ng generate component newComponent //在项目中构建新代码</div><div class="line">$ ng build  //构建项目存储在 /dist 目录中。</div></pre></td></tr></table></figure>
<p>更多指令请<a href="http://www.tuicool.com/articles/Bn6JrmM" target="_blank" rel="external">参考</a></p>
<h3 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h3><p><strong> 新建项目 </strong> </p>
<ol>
<li><p>第一种方式，这种方式比较慢，建议采用第二种。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ng new project-name //创建项目</div><div class="line">$ cd project-name //进入目录</div><div class="line">$ ng serve //编译，启动服务器</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ng new project-name --skip-install //创建项目,创建时不执行任何npm命令</div><div class="line">$ cd project-name //进入目录</div><div class="line">$ cnpm install //利用淘宝镜像安装npm</div><div class="line">$ ng serve //编译，启动服务器</div></pre></td></tr></table></figure>
</li>
</ol>
<p>打开浏览器输入 <a href="http://localhost:4200/，可以看到效果。" target="_blank" rel="external">http://localhost:4200/，可以看到效果。</a></p>
<p><strong> 项目目录结构 </strong><br><img src="/uploads/an.png" alt="01"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVC和MVVM]]></title>
      <url>http://yoursite.com/2017/07/12/mvc/</url>
      <content type="html"><![CDATA[<p>1、MVC 是应用最广泛的软件框架之一，一般MVC分为：Model（模型），View（视图），Controller（控制器）。</p>
<a id="more"></a>
<p>Model可直接访问业务数据，View数据的显示，Controller联系View和Model，基本联系是单向的。<br>首先View传送指令给Controller；<br>然后Controller完成逻辑后，要求Model改变状态最后：<br>Model将新数据发送给ViewUser。<br>MVC架构的缺点，视图与控制器间的过于紧密的链接。<br><img src="/uploads/mvc/mvc01.png" alt="mvc01"><br>2、MVP是从经典的MVC演变而来，Controller/Presenter负责逻辑处理，Model提供数据，View显示数据。不过在MVP中，Presenter把View和Model进行了分离，主要的程序逻辑在Presenter中实现，而Presenter与具体的View没有直接关联，而是通过定义好的接口进行交互，使得在更变View的时候可以保持Presenter不变。<br><img src="/uploads/mvc/mvc02.png" alt="mvc02"><br>3、相比于前面两种模式，MVVM只是把MVC的Controller和MVP的Presenter改成了ViewModel,基本和Mvp一致，唯一区别就是，采用双向绑定，View的变化会自动更新到ViewModel，ViewModel的变化也会同步到View上显示。<br><img src="/uploads/mvc/mvc03.png" alt="mvc03"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[双向绑定的优缺点]]></title>
      <url>http://yoursite.com/2017/07/12/model_youdian/</url>
      <content type="html"><![CDATA[<p><strong>单向数据绑定：</strong><br>指的是我们先把模板写好，然后把模板和数据（数据可能来自后台）整合到一起形成HTML代码，然后把这段HTML代码插入到文档流里面。缺点：单向数据绑定缺点：HTML代码一旦生成完以后，就没有办法再变了，如果有新的数据来了，那就必须把之前的HTML代码去掉，再重新把新的数据和模板一起整合后插入到文档流中。<br>优点：单向数据流　数据流动方向可以跟踪，流动单一，追查问题的时候可以跟快捷。</p>
<p><strong>双向数据绑定：</strong><br>数据模型（Module）和视图（View）之间的双向绑定。<br>缺点：各种数据相互依赖相互绑定，导致数据问题的源头难以被跟踪到，不利于管理数据源。<br>优点:双向数据绑定最经常的应用场景就是表单了，这样当用户在前端页面完成输入后，不用任何操作，我们就已经拿到了用户的数据存放到数据模型中了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 语法的简要规则]]></title>
      <url>http://yoursite.com/2017/07/12/markdown/</url>
      <content type="html"><![CDATA[<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p>在文字前加 # 号</p>
<h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h3><p>在文字前加 - 或者 * 变为无序列表，在文字前加 1. 2. （符号和文字间有个空格）为有序列表<br><a id="more"></a></p>
<h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><p>在文本前加入&gt;即可</p>
<h3 id="4-图片与链接"><a href="#4-图片与链接" class="headerlink" title="4. 图片与链接"></a>4. 图片与链接</h3><p>插入链接与插入图片的语法很像，区别在一个 !号<br><img src="/uploads/markdown/04.jpg" alt="04"></p>
<h3 id="5-粗体与斜体"><a href="#5-粗体与斜体" class="headerlink" title="5. 粗体与斜体"></a>5. 粗体与斜体</h3><p>两个 * 号为粗体，一个为斜体</p>
<h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h3><p>‘<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |<br>’</p>
<h3 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7. 代码框"></a>7. 代码框</h3><p>两个 ` 把中间的代码包裹起来</p>
<h3 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8. 分割线"></a>8. 分割线</h3><p>三个 * 号</p>
<p>详细可参考<a href="https://www.zybuluo.com/mdeditor#fn:code" target="_blank" rel="external">Markdown 编辑阅读器</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>http://yoursite.com/2017/07/12/Linux/</url>
      <content type="html"><![CDATA[<p><strong> 1、文件管理 </strong></p>
<p>①查看文件</p>
<p>查看当前目录下的文件和目录： ls </p>
<p>查看当前目录下的文件和目录，获取更多的文件信息： ls   -l(list)</p>
<p>查看隐藏文件：ls   -a(all)</p>
<a id="more"></a>
<p>元字符 （* 和 ?）</p>
<p> *可以匹配 0 个或多个任意字符</p>
<p> ? 匹配一个字符。</p>
<p>例如：$ls ch*.doc  (显示所有以ch开头， 以 .doc结尾的文件)</p>
<p>②创建文件</p>
<p>$ vi filename</p>
<p>创建一个 filename 为名字的文件并打开，按下 i 进入编辑模式</p>
<p>③查看文件内容</p>
<p>cat 命令来查看文件内容， -b 选项来显示行号</p>
<p>$ cat -b filename</p>
<p>复制文件（cp）重命名（mv）删除（rm）</p>
<p>在文件系统中搜索某文件  find</p>
<p>在文本文件中查找某个字符串 grep</p>
<p><strong> 2、目录 </strong></p>
<p>进入目录  cd</p>
<p>退出当前目录  cd -</p>
<p>获取当前所在的目录 pwd</p>
<p>文件权限 ：读取(r)、写入(w)和执行(x)</p>
<p>更改权限 ：sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]  目录名 </p>
<p><strong> 3、vim使用 </strong></p>
<p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p>
<p>命令模式下：</p>
<p>退出 :q  </p>
<p>强制退出 :q! </p>
<p>保存并退出 :wq  </p>
<p>显示行号 :set number   </p>
<p>隐藏行号 :set nonumber</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跨域请求的几种方式]]></title>
      <url>http://yoursite.com/2017/07/12/kuayu/</url>
      <content type="html"><![CDATA[<h3 id="一、为何需要跨"><a href="#一、为何需要跨" class="headerlink" title="一、为何需要跨"></a>一、为何需要跨</h3><pre><code>同源策略是浏览器的基本安全功能，所谓同源，即协议、域名、端口相同。当浏览器执行一个脚本是，会检查脚本是否同源，才会去执
</code></pre><p>行！如果不同如何去执行呢，这时候就需要跨域！</p>
<h3 id="二、跨域的具体方式"><a href="#二、跨域的具体方式" class="headerlink" title="二、跨域的具体方式"></a>二、跨域的具体方式</h3><pre><code>提到跨域，可能光想到有个jsonp。然而jsonp是什么，跨域还有没有其他方式就不知道了，所下面来了解下跨域的几种方式及原理：
1、jsonp(json with padding)
在前面讲到浏览器有同源策略的限制，但是 &lt;img&gt;的src，&lt;link&gt;的href，&lt;script&gt;的&lt;script&gt;所以你会发现A网站的图片地址，放到B网站同样也可以显示。
jsonp，就是&lt;script&gt;的src不符合同源策略而来的。通过&lt;script&gt;的src动态引入文件，返回服务器端数据。

2、
3、
4、
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript 模板引擎]]></title>
      <url>http://yoursite.com/2017/07/12/js_template/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[js事件委托]]></title>
      <url>http://yoursite.com/2017/07/12/js_event/</url>
      <content type="html"><![CDATA[<p><strong> 事件委托 </strong> 就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p>
<p>比如一个<code>ul</code>有100个<code>li</code>， 这 100个 <code>li</code> 都有相同的点击事件，如果我们采用循环的方法对这100个<code>li</code>click方法，这样我们就需要不断的和DOM节点交互，DOM访问次数越多，DOM重绘重排就越多。可是如果使用 事件委托机制去处理的话，我们只需要给 <code>ul</code> 加上个点击事件就可以了，DOM操作只需交互一次，大大提高性能。</p>
<p><strong> 那事件委托是怎么去实现的呢? </strong><br>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？<br>就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>
<p>如果我们只想在点击<code>li</code>的时候触发 点击事件，点击 <code>ul</code>的时候不会触发，这个时候我们可以使用（target）：<br>Event对象提供了一个属性叫target，可以返回事件的目标节点，也就是目标源，target就可以表示最初触发事件的DOM元素，标准浏览器用ev.target，IE浏览器用event.srcElement,这时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写（target.nodeName.toLowerCase）再做比较</p>
<p>if(target.nodeName.toLowerCase() == ‘li’)</p>
<p>通常我们会比较 event.target 和 this 来确定事件是不是由于冒泡而触发的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js运算出现多位小数问题]]></title>
      <url>http://yoursite.com/2017/07/12/js_division/</url>
      <content type="html"><![CDATA[<p>不知道你们有没有踩过，js运算时出现多位小数的坑，比如 22.77+10，结果竟然是32.769999999996。<br>目前我的解决方案是这样的：<br>首先将小数变成整数，然后再除于相应的倍数。比如上面的计算可以写成（（22.77×100）+（10×100））/100</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function getNumber()&#123;</div><div class="line">	var a = 22.77;</div><div class="line">	var b = 10;</div><div class="line">    var aa = Math.pow(10,data_rate(a));//a放大的倍数</div><div class="line">    var bb = Math.pow(10,data_rate(b));//b放大的倍数</div><div class="line">    var cc = aa*bb;//总共放大的倍数</div><div class="line">    alert(((a*cc)+(b*cc))/cc)</div><div class="line">&#125;</div><div class="line">function  data_rate(str)&#123;//这里计算放大多少倍</div><div class="line">        str = str.toString();</div><div class="line">        if(str.indexOf(&quot;.&quot;) == -1)&#123;</div><div class="line">            return 1;</div><div class="line">        &#125;else&#123;</div><div class="line">            return parseInt(str.length-str.indexOf(&quot;.&quot;)-1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[encodeURl()加号变空格问题]]></title>
      <url>http://yoursite.com/2017/07/12/js_decode/</url>
      <content type="html"><![CDATA[<p>使用 encodeURIComponent() ，嘿嘿。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript闭包]]></title>
      <url>http://yoursite.com/2017/07/12/js_closure/</url>
      <content type="html"><![CDATA[<h3 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h3><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域无非就是两种：全局变量和局部变量。<br>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var n=999;</div><div class="line">function f1()&#123;</div><div class="line">alert(n);</div><div class="line">&#125;</div><div class="line">f1(); // 999</div></pre></td></tr></table></figure>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">unction f1()&#123;</div><div class="line">var n=999;</div><div class="line">&#125;</div><div class="line">alert(n); // error</div></pre></td></tr></table></figure>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">n=999;</div><div class="line">&#125;</div><div class="line">f1();</div><div class="line">alert(n); // 999</div></pre></td></tr></table></figure>
<h3 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。<br>那就是在函数的内部，再定义一个函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">var n=999;</div><div class="line">function f2()&#123;</div><div class="line">alert(n); // 999</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（chainscope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。<br>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">var n=999;</div><div class="line">function f2()&#123;</div><div class="line">alert(n); </div><div class="line">&#125;</div><div class="line">return f2;</div><div class="line">&#125;</div><div class="line">var result=f1();</div><div class="line">result(); // 999</div></pre></td></tr></table></figure>
<h3 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h3><p>上一节代码中的f2函数，就是闭包。<br>各种专业文献上的”闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h3 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>怎么来理解这句话呢？请看下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">var n=999;</div><div class="line">nAdd=function()&#123;n+=1&#125;</div><div class="line">function f2()&#123;</div><div class="line">alert(n);</div><div class="line">&#125;</div><div class="line">return f2;</div><div class="line">&#125;</div><div class="line">var result=f1();</div><div class="line">result(); // 999</div><div class="line">nAdd();</div><div class="line">result(); // 1000</div></pre></td></tr></table></figure></p>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，<strong> 首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。</strong>其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h3 id="五、使用闭包的注意点"><a href="#五、使用闭包的注意点" class="headerlink" title="五、使用闭包的注意点"></a>五、使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
<h3 id="六、思考题"><a href="#六、思考题" class="headerlink" title="六、思考题"></a>六、思考题</h3><p>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。<br>代码片段一:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;;</div><div class="line">  var object = &#123;</div><div class="line">  name : &quot;My Object&quot;,</div><div class="line">  getNameFunc : function()&#123;</div><div class="line">  return function()&#123;</div><div class="line">  return this.name;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>
<p>代码片段二:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;;</div><div class="line">var object = &#123;</div><div class="line">name : &quot;My Object&quot;,</div><div class="line">getNameFunc : function()&#123;</div><div class="line">var that = this;</div><div class="line">return function()&#123;</div><div class="line">return that.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　 &#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github 搭建博客]]></title>
      <url>http://yoursite.com/2017/07/12/hexo/</url>
      <content type="html"><![CDATA[<h3 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node"></a>1. 安装node</h3><p>安装Node（必须）<br>作用：用来生成静态页面的<br>到Node.js官网下载相应平台的最新版本，一路安装即可。</p>
<p>安装Git（必须）<br>作用：把本地的hexo内容提交到github上去。<br><a id="more"></a></p>
<h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><p>创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。<br>（Windows cmd 执行如下命令）<br>安装Hexo：<br><strong>npm install -g hexo</strong><br>初始化hexo：<br><strong>hexo init</strong><br>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。<br><!-- more --><br>可以本地启动，进行文章预览：<br><strong>hexo server</strong> 或者（hexo s）<br>浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ,现在你就可以看到你的页面啦</p>
<p>文件夹结构：<br>scaffolds 工具模板<br>scripts hexo的功能js<br>source 博客资源文件夹<br>source/_drafts 草稿文件夹<br>source/_posts 文章文件夹<br>themes 存放皮肤的文件夹<br>themes/landscape 默认皮肤文件夹<br>_config.yml 全局配置文件<br>db.json json格式的静态常量数据库<br>_posts目录：Hexo存放博客文章的文件夹<br>themes目录：存放皮肤的文件夹，默认使用官方的主题 你也可以从hexo主题页面下载你喜欢的主题</p>
<h3 id="3-配置github"><a href="#3-配置github" class="headerlink" title="3. 配置github"></a>3. 配置github</h3><p>github 是用来做博客的远程创库、域名、服务器之类的</p>
<p>新建 Repository<br>建立与你用户名对应的仓库，仓库名<strong>必须为</strong>【your_user_name.github.io】</p>
<p>找到blog根目录下的   _config.yml  文件</p>
<p>把 deploy  改成<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/ZYLyanzi/ZYLyanzi.github.io.git（你新建的github的仓库地址）" target="_blank" rel="external">https://github.com/ZYLyanzi/ZYLyanzi.github.io.git（你新建的github的仓库地址）</a><br>  branch: master </p>
<p>执行命令<br><strong>npm install hexo-deployer-git –save</strong></p>
<p>（windows 用 git brash）按照github新建仓库的指引，执行命令：<br><strong>git init</strong><br><strong>git add README.md</strong><br><strong>git commit -m “first commit”</strong><br><strong>git remote add origin <a href="https://github.com/ZYLyanzi/yanzi.github.io.git" target="_blank" rel="external">https://github.com/ZYLyanzi/yanzi.github.io.git</a></strong><br><strong>git push -u origin master</strong></p>
<p>push 成功后执行命令：<br><strong>hexo clean</strong><br><strong>hexo generate</strong><br><strong>hexo deploy</strong></p>
<p>然后再浏览器中输入<a href="https://zylyanzi.github.io/" target="_blank" rel="external">https://zylyanzi.github.io/</a>就行了，我的github的账户叫zylyanzi,把这个改成你github的账户名就行了</p>
<p>一些常用的命令：<br><strong>hexo new”postName”</strong> #新建文章<br><strong>hexo new page”pageName”</strong> #新建页面<br><strong>hexo generate</strong> #生成静态页面至public目录<br><strong>hexo server</strong> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><strong>hexo deploy</strong> #将.deploy目录部署到GitHub<br><strong>hexo help</strong> # 查看帮助<br><strong>hexo version</strong> #查看Hexo的版本</p>
<h3 id="4-hexo主题"><a href="#4-hexo主题" class="headerlink" title="4. hexo主题"></a>4. hexo主题</h3><p>hexo 有大量的<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a><br>我自己使用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a></p>
<h3 id="5-关于-Yilia-主题"><a href="#5-关于-Yilia-主题" class="headerlink" title="5.关于 Yilia 主题"></a>5.关于 Yilia 主题</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[构建工具gulp的使用]]></title>
      <url>http://yoursite.com/2017/07/12/gulp/</url>
      <content type="html"><![CDATA[<h3 id="gulp的安装"><a href="#gulp的安装" class="headerlink" title="gulp的安装"></a>gulp的安装</h3><p><strong> 1、 安装node.js </strong><br>如果是新建项目，执行 npm init 创建package.json文件</p>
<p><strong> 2、全局安装gulp </strong><br>$ npm install –global gulp</p>
<p><strong> 3、项目本地安装gulp </strong><br>$ npm install –save-dev gulp<br>(<em> –save 可以让gulp插件显示在 package.json中</em>)<br><a id="more"></a></p>
<h3 id="gulp的使用"><a href="#gulp的使用" class="headerlink" title="gulp的使用"></a>gulp的使用</h3><h4 id="1、新建-gulpfile-js-文件"><a href="#1、新建-gulpfile-js-文件" class="headerlink" title="1、新建 gulpfile.js 文件"></a>1、新建 gulpfile.js 文件</h4><p>在项目根目录下创建一个名为 gulpfile.js 的文件。</p>
<p>此时我们的目录结构是这样的：<br>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>
<h4 id="2、API介绍"><a href="#2、API介绍" class="headerlink" title="2、API介绍"></a>2、API介绍</h4><p>gulp有四个常用的API:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.src()</div><div class="line">gulp.task()</div><div class="line">gulp.dest()</div><div class="line">gulp.watch()</div></pre></td></tr></table></figure></p>
<p>更多API可以参考 <a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">gulp API 文档</a></p>
<p><strong> 2.1 gulp.src() </strong><br>gulp.src(globs[, options])<br>globs：参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。<br>options：为可选参数。</p>
<p><strong> 2.2 gulp.task() </strong><br>用来定义任务。<br>gulp.task(name[, deps], fn)<br>name：为任务名<br>deps：是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数<br>fn：为任务函数，我们把任务要执行的代码都写在里面。</p>
<p><strong> 2.3 gulp.dest() </strong><br>用来写文件。<br>gulp.dest(path[, options])<br>path：为写入文件的路径<br>options：为一个可选的参数对象</p>
<p><strong> 2.4 gulp.watch() </strong><br>用来监听文件变化。<br>gulp.watch(glob[, opts, cb])<br>glob：为要监视的文件匹配模式，规则和用法与gulp.src()方法中的glob相同。<br>opts：为一个可选的配置对象，通常不需要用到<br>tasks：为文件变化后要执行的任务，为一个数组</p>
<h4 id="3、插件"><a href="#3、插件" class="headerlink" title="3、插件"></a>3、插件</h4><p><strong> 插件的安装 </strong><br>$npm –save-dev install 插件名 </p>
<p>更多插件可以参考<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git撤销操作]]></title>
      <url>http://yoursite.com/2017/07/12/git_checkout/</url>
      <content type="html"><![CDATA[<ol>
<li>取消对文件的修改</li>
</ol>
<p><code>git checkout --path/to/file.c</code></p>
<ol>
<li>取消已经暂存的文件</li>
</ol>
<p>暂存文件说明：修改了文件，执行git add命令后,就变成暂存的文件。<br><code>git reset HEAD --path/to/file.c</code></p>
<ol>
<li>撤销本地提交（commit）</li>
</ol>
<p>查看提交历史<br><code>git log</code></p>
<p>查看各个提交历史的统计<br><code>git log --stat</code></p>
<p>查看最近N次提交的具体差异<br><code>git log -p -N</code></p>
<p>撤销上一次提交（git commit了，但没有git push）<br><code>git reset --hard 版本序列号</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一张图读懂 git远程操作]]></title>
      <url>http://yoursite.com/2017/07/12/git/</url>
      <content type="html"><![CDATA[<p>Workspace：工作区</p>
<p>Index / Stage：暂存区</p>
<p>Repository：仓库区（或本地仓库）</p>
<p>Remote：远程仓库<br><a id="more"></a></p>
<p>命令详解：</p>
<p>$ git clone &lt;版本库的网址&gt;，，，，支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议</p>
<p>$ git remote  列出远程主机名（-v，可查看远程主机网址）</p>
<p>$ git fetch  &lt;远程主机名&gt; &lt;分支名&gt;​    将远程主机的更新，全部取回到本地</p>
<p>$ git pull  取回远程主机某个分支的更新，再与本地的指定分支合并（相当于先 git fetch 再 git merge）</p>
<p>$ git push 将本地分支更新，推送到远程主机</p>
<p>$ git add 暂存。git 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit 提交。</p>
<p><img src="/uploads/git.png" alt="002"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex 布局]]></title>
      <url>http://yoursite.com/2017/07/12/flexbox/</url>
      <content type="html"><![CDATA[<p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>
<p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。</p>
<a id="more"></a>
<h3 id="一、布局模型"><a href="#一、布局模型" class="headerlink" title="一、布局模型"></a>一、布局模型</h3><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br><img src="http://oi5lhmcye.bkt.clouddn.com/22.png" alt="01"><br>容器默认存在两根轴：<br>水平主轴（main axis）和垂直的交叉轴（cross axis）。<br>主轴的开始位置叫做<code>main start</code>，结束位置叫<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>,结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h3 id="二、伸缩容器属性"><a href="#二、伸缩容器属性" class="headerlink" title="二、伸缩容器属性"></a>二、伸缩容器属性</h3><p>伸缩容器支持的属性有：</p>
<blockquote>
<ul>
<li>display</li>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
</blockquote>
<p><strong> 1、display </strong><br>该属性用来指定元素是否为伸缩容器：<br>display:flex | inline-flex</p>
<blockquote>
<ul>
<li>flex:产生块级伸缩容器。</li>
<li>inline-flex:行内级伸缩容器。</li>
</ul>
</blockquote>
<p>注意：当display：flex时，css的colums在伸缩容器上没有效果，float，clear，vertical-align在伸缩项目上没有效果。</p>
<p><strong> 2、flex-direction </strong><br>该属性用来指定主轴方向：<br>flex-direction: row | row-reverse | column | column-reverse</p>
<blockquote>
<ul>
<li>row（默认值）: 主轴为水平方向，起点在左端，伸缩项目从左向右排列。</li>
<li>row-reverse ：主轴为水平方向，起点在右端，伸缩项目从右到左排列。</li>
<li>column: 主轴为水平方向，起点在左端，伸缩项目从上到下排列。</li>
<li>column-reverse ：主轴为水平方向，起点在右端，伸缩项目从上到下排列</li>
</ul>
</blockquote>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/23.png" alt="02"></p>
<p><strong> 3、flex-wrap </strong><br>该属性主要用来指定伸缩容器主轴线方向空间不足的情况下，是否换行已经如何换行：<br>flex-wrap: nowrap | wrap | wrap-reverse</p>
<p>nowrap ：不换行。</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/24.png" alt="03"></p>
<p> wrap: 允许换行，从上到下。</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/25.png" alt="04"></p>
<p> wrap-reverse ：允许换行，从下到上。</p>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/26.png" alt="05"></p>
<p><strong> 4、flex-flow </strong><br>flex-flow属性是flex-direction属性和flex-wrap属性的缩写版本，同时定义了伸缩容器的主轴和侧轴，默认值为row nowrap。</p>
<p> flex-flow: flex-direction  flex-wrap;</p>
<p> <strong> 5、justify-content </strong><br>改属性定义了项目沿主轴的对齐方式：<br>justify-content: flex-start | flex-end | center | space-between | space-around</p>
<p>具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<blockquote>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center：居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
</blockquote>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/27.png" alt="06"></p>
<p> <strong> 6、align-items </strong><br>该属性定义了项目在交叉轴的对齐方式：<br>align-items: flex-start | flex-end | center | baseline | stretch</p>
<blockquote>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
</blockquote>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/28.png" alt="07"></p>
<p><strong> 7、align-content </strong><br>该属性用来调整项目出现换行后在交叉轴上的对齐方式：<br>align-content: flex-start | flex-end | center | space-between | space-around | stretch</p>
<blockquote>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<p><img src="http://oi5lhmcye.bkt.clouddn.com/29.png" alt="08"></p>
<h3 id="三、伸缩项目属性"><a href="#三、伸缩项目属性" class="headerlink" title="三、伸缩项目属性"></a>三、伸缩项目属性</h3><p>伸缩容器支持的属性有：</p>
<blockquote>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
</blockquote>
<p><strong> 1、order </strong><br>这个属性用来定义项目的排序顺序。数值越小，排列越靠前，默认值为0：<br>order: integer</p>
<p><strong> 2、flex-grow </strong><br>该属性用来定义伸缩项目的放大比例，默认值为0，即如果存在剩余空间，也不放大。如果所有的伸缩项目的flex-grow设置为1，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果将其中一个伸缩项目设置为2，那么这个项目所占的剩余空间是其他项目所占的剩余空间的两倍：<br>flex-grow：number</p>
<p><strong> 3、flex-shrink </strong><br>该属性用来定义伸缩项目的收缩能力，默认值为1：<br>flex-shrink：number</p>
<p>比如：将某个项目设为 flex-shrink：3，则该元素在空间不足的情况下，缩小为其他元素大小的1/3.</p>
<p><strong> 4、flex-basis </strong><br>该属性用来定义伸缩项目的基准值，剩余的空间按比率进行伸缩：<br>flex-basis：length | auto</p>
<p><strong> 5、flex </strong><br>该属性是,flex-grow,flex-shrink,flex-basis这三个属性的缩写：<br>flex：none | flex-grow lex-shrink flex-basis</p>
<p><strong> 6、align-self </strong><br>该属性用来设置单独项目在交叉轴上的对齐方式，会覆写默认的对齐方式：<br>align-self：auto | flex-start | flex-end | center | baseline | stretch</p>
<blockquote>
<ul>
<li>auto：伸缩项目按照自身设置的宽高显示，如果没有设置，则按stretch来计算其值。</li>
<li>flex-start：伸缩项目向交叉轴的起始位置靠齐。</li>
<li>flex-end：伸缩项目向交叉轴的结束位置靠齐。</li>
<li>center：伸缩项目向交叉轴的中心位置靠齐。</li>
<li>baseline：按基线对齐。</li>
<li>stretch（默认值）：在交叉轴方向沾满伸缩容器。</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6的let和const]]></title>
      <url>http://yoursite.com/2017/07/12/es6_let/</url>
      <content type="html"><![CDATA[<h3 id="一、块级作用域"><a href="#一、块级作用域" class="headerlink" title="一、块级作用域"></a>一、块级作用域</h3><p>所谓“块”，就是大括号“｛｝”中间的语句。<br>ES5只有全局作用域和函数作用域，没有块级作用域，这带来了很多不合理的场景。</p>
<p>1、变量提升，导致内层变量覆盖外层变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var tmp = 20;</div><div class="line">function f()&#123;</div><div class="line">	console.log(tmp); //变量提升，仅提升变量名，为提升变量值</div><div class="line">	var tmp = &quot;hello&quot;;</div><div class="line">&#125;</div><div class="line">f();// undefined</div></pre></td></tr></table></figure></p>
<p>var 是函数作用域。在整个函数中甚至是声明语句之前都是可用的。声明被提升。所以你能在声明之前使用一个变量。</p>
<a id="more"></a>
<p>2、用来计数的循环变量泄露为全局变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for(var i = 0; i &lt; 10; i++)&#123;</div><div class="line">	a[i] = function()&#123;</div><div class="line">	console.log(i);</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 10</div></pre></td></tr></table></figure></p>
<p>上面代码中i是var声明的，在全局范围内有效。每次循环，新的i值都会覆盖旧值，最后输出10。<br>上面代码定义的 i 只用来控制循环，但是循环结束后并没有消失，而是泄露成了全局变量。</p>
<p>所以ES6就有了let和const命令为JavaScript增加块级作用域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for(let i = 0; i &lt; 10; i++)&#123;</div><div class="line">	a[i] = function()&#123;</div><div class="line">	console.log(i);</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 6</div></pre></td></tr></table></figure></p>
<p>上面代码中i是let声明的，当前的i只在本轮循环有效。所以每一次的循环i都是个新的变量，最后输出6。<br>所以for循环计数器很适合用let命令。</p>
<h3 id="二、let和const命令"><a href="#二、let和const命令" class="headerlink" title="二、let和const命令"></a>二、let和const命令</h3><p><strong> let命令的使用： </strong><br>1、let不存在变量提升，变量一定要先声明后使用，否则会报错。<br>2、let命令声明变量之前，该变量都是不可用的，语法称为“暂时性死区”—即代码块开始，到变量使用之前的区间。<br>3、使用let命令声明的变量“绑定”在这个块级区域内，不再受外部影响，所以外层作用域无法读取内层作用域的变量。<br>4、let不允许在相同作用域内重复声明一个变量。</p>
<p>块级作用域的出现，使得立即执行匿名函数（IIFE）不再必要了。</p>
<p><strong> const命令的使用 </strong><br>1、const用来声明常量，一旦声明，其值就不能改变。<br>2、对于const而言，只声明，不赋值就会报错。<br>3、const也不可以重复声明变量。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6简介及转码]]></title>
      <url>http://yoursite.com/2017/07/12/es6/</url>
      <content type="html"><![CDATA[<h3 id="一、ES6是什么"><a href="#一、ES6是什么" class="headerlink" title="一、ES6是什么"></a>一、ES6是什么</h3><p>ECMAScript6（简称ES6）是JavaScript语言的下一代标准，于2015年6月发布。所以ES2015，也就是ES6。ECMAScript是JavaScript的规格，JavaScript是ECMAScript的一种实现。<br><a id="more"></a></p>
<h3 id="二、浏览器对ES6的支持情况。"><a href="#二、浏览器对ES6的支持情况。" class="headerlink" title="二、浏览器对ES6的支持情况。"></a>二、浏览器对ES6的支持情况。</h3><p>详细情况可查阅 <a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="external">http://kangax.github.io/compat-table/es6/</a>。<br>可以看出基本上没有浏览器完全支持ES6，所以一般不要直接用的好，但是我们可以用 <strong>转码器</strong> 把ES6转换为被浏览器接受的ES5。</p>
<h3 id="三、ES6转码"><a href="#三、ES6转码" class="headerlink" title="三、ES6转码"></a>三、ES6转码</h3><p>Babel是一个对ES6支持程度较高，使用范围较广的转码器。<br>Babel使用方法总结：<br>    <strong> 1、在命令行中使用 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ npm install --global babel-cli</div><div class="line"></div><div class="line"># 转码结果输出到标准输出</div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"># 转码结果写入一个文件</div><div class="line"># --out-file 或 -o 参数指定输出文件</div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line"># 或者</div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"># 整个目录转码</div><div class="line"># --out-dir 或 -d 参数指定输出目录</div><div class="line">$ babel src --out-dir lib</div><div class="line"># 或者</div><div class="line">$ babel src -d lib</div><div class="line"></div><div class="line"># -s 参数生成source map文件</div><div class="line">$ babel src -d lib -s</div></pre></td></tr></table></figure></p>
<p><strong> 2、浏览器环境 </strong><br>这个方法的缺点是实时转码需要时间，性能上不及预先转换的方案，因此生产环境中不推荐使用，仅供学习研究使用。<br>首先我们需要下载browser.js，注意，这是 Babel 5 的版本，Babel 6 开始不再直接提供该文件，需要自行构建。<br>除了从上面的链接下载，你也可以用 npm 下载：<br>npm install babel-core@5<br>下载后在node_modules/babel-core子目录中就能找到browser.js文件。<br>使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;node_modules/babel-core/browser.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/babel&quot; src=&quot;your_own_es6_file.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>有两点需要注意<br>browser.js 文件必须放在你自己的 js 文件之前<br>你自己的文件的类型要写成type=”text/babel”<br><strong> 3、在线转换 </strong><br>Babel提供一个<a href="https://babeljs.io/repl/" target="_blank" rel="external">REPL在线编译器</a>，可以在线将ES6代码转为ES5代码。转换后的代码，可以直接作为ES5代码插入网页运行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue基础笔记整理]]></title>
      <url>http://yoursite.com/2017/07/12/about_vue/</url>
      <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p>vue核心思想：数据驱动，组件化。<br>vue特点：轻量，数据绑定，指令，模块化。<br>传统视图驱动：js操作dom<br>数据驱动：当数据发生变化时，用户界面发生相应的变化，不需要手动修改dom</p>
<h4 id="1、数据绑定方式："><a href="#1、数据绑定方式：" class="headerlink" title="1、数据绑定方式："></a>1、数据绑定方式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 插值 --&gt;</div><div class="line">&#123;&#123; message &#125;&#125;</div><div class="line">&#123;&#123;&#123; htmlSegment &#125;&#125;&#125;</div><div class="line">&lt;img src=&quot;&#123;&#123; photoURL &#125;&#125;&quot; /&gt;</div><div class="line">&lt;!-- 表达式 --&gt;</div><div class="line">&#123;&#123;true ? 1 : 0&#125;&#125;</div><div class="line">&lt;!-- 指令 --&gt;</div><div class="line">&lt;div v-if=&quot;upgradable&quot;&gt;升级指南：...&lt;/div&gt;</div><div class="line">&lt;span v-text=&quot;anotherMessage&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;div v-html=&quot;anotherHTMLSegment&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;li v-bind:class=&quot;&#123;&apos;current&apos;: thisIsTheCurrentItem&#125;&quot;&gt;Item&lt;/li&gt;</div><div class="line">&lt;a v-bind:href.literal=&quot;javascript:void(0)&quot; v-on:click.stop=&quot;doSomething&quot;&gt;Click Me&lt;/a&gt;</div></pre></td></tr></table></figure>
<h4 id="2、计算属性："><a href="#2、计算属性：" class="headerlink" title="2、计算属性："></a>2、计算属性：</h4><p>计算属性就是当其依赖属性的值发生变化时，这个属性值会自动更新，与之相关的dom部分也会自动更新。<br>Vue.js 提供了一个 $watch 方法用于观察 Vue 实例上的数据变动，这与 AngularJS 的做法类似。不过，通常更好的办法是使用计算属性而不是一个命令式的 $watch 回调。<br>模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    长：&#123;&#123; a &#125;&#125;m、宽：&#123;&#123; b &#125;&#125;m</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;input type=&quot;range&quot; v-model=&quot;a&quot;&gt;</div><div class="line">  &lt;input type=&quot;range&quot; v-model=&quot;b&quot;&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    长方形面积：&#123;&#123; s &#125;&#125;m&lt;sup&gt;2&lt;/sup&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>Vue 实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  data: &#123;</div><div class="line">    a: 6,</div><div class="line">    b: 5,</div><div class="line">    s: 30</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch(&apos;a&apos;, function (val) &#123;</div><div class="line">  this.s = val * this.b</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch(&apos;b&apos;, function (val) &#123;</div><div class="line">  this.s = this.a * val</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>如果使用计算属性，我们只需要编写一次计算逻辑，Vue.js 会自动建立该计算属性与 Vue 实例数据 a、b 的依赖关系并追踪变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  data: &#123;</div><div class="line">    a: 6,</div><div class="line">    b: 5</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    s: function () &#123;</div><div class="line">      return this.a * this.b</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们可以设置计算属性的getter和setter。<br><strong>计算属性getter不执行场景：</strong>当计算属性的节点被移除并且模板其他地方没有引用该属性时，那么对应的计算属性getter方法不会执行。</p>
<p>一般情况下，使用计算属性比 $watch 实现简洁、维护方便，对于需要观察 Vue 实例数据变动的需求，如无特殊情况均应优先使用计算属性。</p>
<p>根据 Vue.js 的 $watch API 文档，当调用 Vue 实例的 $watch 方法创建 $watch 时，返回一个 unwatch 函数，用于取消观察，因此在需要取消观察的场合，使用 $watch 为佳。</p>
<h4 id="3、条件渲染的注意事项："><a href="#3、条件渲染的注意事项：" class="headerlink" title="3、条件渲染的注意事项："></a>3、条件渲染的注意事项：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">多于一个元素的 v-if 需要使用 &lt;template&gt;</div><div class="line">v-show 不支持 &lt;template&gt;</div><div class="line">v-else 必须紧跟在 v-if/v-show 指令后面</div><div class="line">组件条件下不能使用 &lt;v-else&gt;</div><div class="line">将v-show用在组件上时，因为指令的优先级v-else会出现问题，所以我们可以使用另一个v-show来替换v-else</div></pre></td></tr></table></figure>
<h4 id="4、数据变化检测："><a href="#4、数据变化检测：" class="headerlink" title="4、数据变化检测："></a>4、数据变化检测：</h4><p>包装了观察数组变异的方法：push(),pop(),shift(),unshift(),splice(),sort(),reverse()。<br>观测变化的两个方法：$set,$remove.<br>track-by特殊属性。</p>
<h4 id="5、v-bind绑定类与样式："><a href="#5、v-bind绑定类与样式：" class="headerlink" title="5、v-bind绑定类与样式："></a>5、v-bind绑定类与样式：</h4><p>使用数组语法时，绑定表达式可以直接是 Vue 实例的 Data 属性中的一个数组，根据在列表渲染中所学到的关于数据变化检测的原理及对数组方法的包装和扩充知识，可以知道，Vue.js 支持使用 push 和 $remove 方法实现元素数量的变化，从而实现了 addClass 和 removeClass 的功能。</p>
<h4 id="6、表单控件绑定："><a href="#6、表单控件绑定：" class="headerlink" title="6、表单控件绑定："></a>6、表单控件绑定：</h4><p>使用v-model指令同步用户输入的数据到vue实例data属性中。<br>v-model修饰指令：lazy，debounce，number</p>
<h4 id="7、事件绑定与处理："><a href="#7、事件绑定与处理：" class="headerlink" title="7、事件绑定与处理："></a>7、事件绑定与处理：</h4><p>使用 v-on 指令来监听DOM事件，当click事件与某个方法绑定的时候，定义的方法放在methods属性下。<br>methods中定义的方法内的this始终指向创建的Vue实例；与事件绑定的方法支持参数event即原生DOM事件的传入。</p>
<p>v-on还可以使用内联语句处理，但是限制为一个语句，这个时候如果要访问原生的DOM事件，要用$event.</p>
<p>事件修饰符：.prevent .stop .capture .self<br>事件处理器中，event.preventDefault()用来阻止事件的默认行为，event.stopPropagation()用来阻止事件冒泡。<br>.prevent相当于event.preventDefault()，.stop相当于event.stopPropagation()，.capture捕获方式侦听事件，事件以与冒泡方式相反的方式在 DOM 树上传递，.self限制只接受自身触发的事件。</p>
<p>按键修饰符：（可以简化键盘的keycode处理）enter，tap，delete，esc，space，up，down，left，right</p>
<h4 id="8、watch的使用："><a href="#8、watch的使用：" class="headerlink" title="8、watch的使用："></a>8、watch的使用：</h4><p>watch:一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p>
<p>我们对计算属性和 $watch 进行了简单的比较，对于有多个依赖需要追踪的情形，优先使用计算属性。<br>对于由一个数据变化引发多个数据、状态变化的情况，我们推荐使用 watcher；数据变化触发组件间或前后端交互的情况，使用 watcher 也更简明。</p>
<p>关于 watcher 的应用场合，试举例如下：<br>1.某元素通过 v-show 显示后延时隐藏，可以观察 v-show 所绑定的数据，当数据为真时，启动定时器延时重新设置 v-show 所绑定的数据隐藏元素；<br>2.日历控件中，日期数值发生变化，获取年、月，计算并重绘日历面板；<br>3.分页控件用户点击页码触发 pageIndex 数据变化，观察到 pageIndex 变化时触发向后端发起 AJAX 请求，获取该页码中的数据记录，并在获取数据记录后更新分页控件中的页码及状态；<br>4.用户输入地址，数据变化触发向高德地图发起 AJAX 请求，获取相类似的地址列表并实现 auto-complete；</p>
<p><strong>　由于 watcher 通过函数回调响应数据变化，而在回调函数中还有可能触发其他数据变化引发其他 watcher 回调，因此需要避免滥用造成回调结构过于复杂，影响性能。</strong></p>
<h3 id="二、组件开发"><a href="#二、组件开发" class="headerlink" title="二、组件开发"></a>二、组件开发</h3><p>组件的核心目标是为了提高可复用性。一般我们把组件按照template，style，script的拆分方式，放到.vue文件中。</p>
<h4 id="1、注册与使用-全局注册，局部注册"><a href="#1、注册与使用-全局注册，局部注册" class="headerlink" title="1、注册与使用:全局注册，局部注册"></a>1、注册与使用:全局注册，局部注册</h4><h4 id="2、数据传递："><a href="#2、数据传递：" class="headerlink" title="2、数据传递："></a>2、数据传递：</h4><p>props:<br>子组件需要用props选项来获取父组件的数据。<br>使用v-bind将动态的props绑定到父组件的数据。<br>默认绑定是单向的，但是可以使用绑定修饰符改变：.sync双向绑定，.once单向绑定。<br>可以给props指定验证要求，指定type，当验证失败时，Vue.js将拒绝在子组件上设置此值。</p>
<p>slot:<br>slot 混合父组件的内容与子组件的内容，slot在bind回调函数中，根据name获取将要替换插槽的元素，具名slot将匹配内容片断钟有对应的slot特性元素。不过任然可以有一个匿名的slot，作为找不到匹配元素的内容片断的回退槽，它是默认slot。如果没有默认的slot，这些找不到匹配元素的内容片断将会被抛弃。<br>例如：有个multi-insertion 组件 ,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;slot name = &quot;one&quot;&gt;&lt;/slot&gt;</div><div class="line">  &lt;slot&gt;&lt;/slot&gt;</div><div class="line">  &lt;slot name = &quot;two&quot;&gt;&lt;/slot&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">父组件</div><div class="line">&lt;multi-insertion&gt;</div><div class="line">  &lt;p slot = &quot;one&quot;&gt;one&lt;/p&gt;</div><div class="line">  &lt;p slot = &quot;two&quot;&gt;one&lt;/p&gt;</div><div class="line">  &lt;p&gt;default A&lt;/p&gt;</div><div class="line">&lt;/multi-insertion&gt;</div><div class="line">结果为</div><div class="line">&lt;div&gt;</div><div class="line">  &lt;p slot = &quot;one&quot;&gt;one&lt;/p&gt;</div><div class="line">  &lt;p&gt;default A&lt;/p&gt;</div><div class="line">  &lt;p slot = &quot;two&quot;&gt;one&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>动态组件：<br>动态组件 使用同一挂载点，然后动态的在它们之间切换。将组件名绑定到Vue.js特殊的is属性上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;component :is = &quot;currentView&quot; keep-alive&gt;</div><div class="line">&lt;!--组件在vm.currentView 变化时改变--&gt;  </div><div class="line">&lt;/component&gt;</div></pre></td></tr></table></figure></p>
<p>如果挂载组件发生变化，旧组件会被切换出去，切换出去的组件会被卸载。在挂载点上添加 keep-alive 属性。则组件被切换出去后还会保留在内存中，避免重新渲染。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[双向绑定的原理]]></title>
      <url>http://yoursite.com/2017/07/12/about_model/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>
